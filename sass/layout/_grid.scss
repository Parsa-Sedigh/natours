@import "../abstracts/variables";
@import "../abstracts/mixins";

.row {
  /*First we need to define a width for the row and a standard is 1140 px. Now what's wrong with this? Yes, we must use rem instead
   of px and we know that in our project, 10px=1rem (remember: The root font-size is 62.5% of browser font-size which browser font-size
   is 16px so the root font-size would be 10px. So 1rem is 10px in our project. Always remember that 1rem is equal to root font-size
   and 2 rem is equal to root font-size *2 and... . So 114rem is 1140px)
   Learn: What's the difference between width and max-width? max-width means: If we have enough available space, then the element which
    has the max-width, it will the EXACT width that we specified.(In this case 114rem). But if there's not enough width, so basically
    if the viewport is smaller than the max-width value-in this case if the viewport is smaller than 114rem, then the browser will simply
    fill 100% of the available space that it has. But if you were used width instead of max-width, when the screen is smaller than
    width, the element which has the width bigger than current screen will be basically cut! instead of getting the 100% of screen and
    this is bad!

    For centering this row in the viewport, we must use margin: 0 auto. This is the trick for centering a block element which is
    inside another block element. But why this works? When we say margin must be auto, this means that the browser when is rendering
    the page, will automatically figure out the margin that we want on the left and the right side(because we set margin: 0 auto) and
    since right and left margins are set to auto, it means the left and right would be same. So the element would be centered.

     */
  max-width: $grid-width;
  margin: 0 auto;

  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 3rem;
  }

  /* We want the last one row to not have a margin-bottom. Also instead of &:not we can say: &:last-child {margin-bottom: 0} but we can
  do even better by using :not() pseudo selector and in parentheses of :not() we can specify another pseudo class or anything else,
  which in this case it's :last-child.
  Learn: <selector 1>:not(<selector 2>) we are selecting everything that has selector 1 , except elements that have selector2.
  */
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }

  /* The result of this @include is the code that is in the clearFix @mixin which is:
   &::after{
    content: "";
    display:table;
    clear:both;
  } */
  @include clearfix;

  /* Since all of the col-<x>-of-<y> are inside .row, we can nest them inside .row selector. But we COULD place them outside of
   .row selector. So when you place a selector inside another selector, those styles for the nested selector will apply to the
   elements that in html doc, are INSIDE that selector that we nested into it. For example if we have .h1 selector inside .p selector
   all of the styles that we give to .h1 will apply to <h1> elements that are inside <p> element not all of the <h1> elements.*/
  /* We used an attr selector or [class^="col"] instead of a @mixin. Because it is a better practice. But we could also create a @mixin and put
   float: left;
   background-color: blue;
   &:not(:last-child) {
    margin-right: $gutter-horizontal;
  }
  inside of that @mixin.
  Also we COULD create a new class and put these code into that class and then add that class to classes of the columns in html.
  So sth like: class="col col-1-of-2 .

  In [] of attribute selector, we can specify an attribute. So it would be: [<attribute>] . Like: [src="xxx"] .

  ^ means we want the beginning of what we are setting here. So [class^="col-"] would be select all of the elements that have the
   class attr that is start with "col-" . Another one is: [class*="col-"] which will select all of the elements that have a class
   which CONTAINS "col-" . Another one is [class$="col-"] which will select any class that ENDS with "col-"*/
  [class^="col-"] {
    float: left;

    /* The gutter between each of the columns in one row is some kind of margin-right for the all of the columns except the last
     column. Right? Because last column does not have a space at the right side of it. So it hasan't a gutter so it hasen't a margin-right.
     So in all of the types of col-x-of-y we want all of the columns to have margin-right except the last column.

     It doesn't matter you already included the media query mixin in outer {} of this &:not(:last-child) selector. It doesn't matter.
     YOU NEED TO include it again in each {} scope that you want to make it responsive.

     Also we need to give the columns some margin-bottom instead of having margin-right on smaller screens. Also right now, the
     columns are way too wide. But now the rows and columns(which on smaller screens columns are like rows because they have width of
     100% therefore their width is equal to their .row parent.)

     Right now, the row is occupying 100% of it's available width, because the viewport width is smaller than $grid-width, so because
     we wrote that the width of the .row must not go beyond $grid-width which is 114rem. So the MAXIMUM width of a .row must be
     114rem and it CAN has less width than that number, because that number is the MAXIMUM width of .row that it can has.
     SO IF .row couldn't have the max-width specified for it, it can has less width. When that happens? When the viewport width is
     smaller than max-width of .row.
     Learn: So when the width of the viewport is smaller than specified max-width of an element, then that element can't get it's
      max-width that we specified for it so it would get all of the width that it actually can!
      So what max-width does, is it checks if the width of viewport is lower than the specified value of max-width, then the element
      which has that max-width will simply occupy of it's available width.

     So now let's change the width of columns when we're on smaller screens too. Because currently they have width of 100% but
     we can make the width of their parent to a lower number and therefore these columns which on smaller screens get a width of 100%,
     would still get all of the width of their parent but now that width of their parent would be lower because we make the max-width
     of their parent to a smaller value.

     After these changes, we still have some responsive problems with individual components like composition. Because right now we're
     working to make the overall layout, responsive.

     Now let's work on header. The bottom line of header on smaller screens is way too steep, in comparison to the top line of
     features section(currently we are in 600px of viewport width and smaller width-so basically mobile screen). So let's change that
     bottom line of header for phones. So go to layout/header.scss*/
    &:not(:last-child) {
      margin-right: $gutter-horizontal;

      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }

    @include respond(tab-port) {
      /* Here I used !important, because I want to really make sure that the width props of col-1-of-2 and ... are overwritten by
      this responsive width.*/
      width: 100% !important;
    }
  }

  /* Here inside parentheses of calc() function, we're writing native css not scss although we're inside a scss file, it doesn't matter
   we can write css inside a scss file. So we know that for layout calculations, we must write native css inside parentheses of
   calc() . So here we must do that as well. So instead of using the sass variables purely here, like 100% - $gutter-horizontal we must
   do it in native css way. So the previous calculation in native css doesn't work. So we must write it in native css way. For this
   task, we must wrap scss variables inside curly braces and then use # . So the prior code would be 100% - #{$gutter-horizontal}.
   So this is native css that is working with scss variable.

   The width of col-2-of-3 is (2* (width of col-1-of-3)) / 3 + $gutter between these 2 col-1-of-3

   The width of .col-3-of-4 is equal to have 3 .col-1-of-4 plus the gutters between them and we have 2 gutter between them. Right?

   For other projects you can change the value of $gutter-horizontal (the space between each of the columns in one row.)*/
  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-3 {
    width: calc((2 * (100% - 2 * #{$gutter-horizontal})) / 3 + #{$gutter-horizontal});
  }

  .col-2-of-4 {
    width: calc((2 * (100% - 3 * #{$gutter-horizontal})) / 4 + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc((3 * (100% - 3 * #{$gutter-horizontal})) / 4 + 2 * #{$gutter-horizontal});
  }

}

