@import "../abstracts/variables";

.story {
  /* Learn: Block elements automatically (and if they aren't already wiped out of normal flow), gets 100% width of their parents,
      but for this .story element, we don't want it to get's 100% width of it's parent automatically so we gave it a width.
      If you don't specify a width for a block element AND if that block element doesn't already wiped out of normal flow,
      the width of that block element is 100%.
      Now when you already centered a block element inside another block element, if you give this block element any other
      width than 100% it won't be no longer centered.
      So we can use margin: 0 auto; on element that we want to center it horizontally and that element will be CENTERED ITSELF!
      This approach(margin: 0 auto;) won't center the children that are inside this block element.
      For making the content that is inside block element to center:
      1)
      Set the child elements to either display:inline or display:inline-block, then set the parent container to text-align:center,
      the children will center in the parent- depending on whatever its width
      2)
      If the child content is block level (display:block) set text:align:center; on the parent, then give the child margin:0 auto
      and a width less than that of the parent*/
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba($color-black, .2);

  /* We want the entire story component gets some opacity less than 1. But we can't simply use for example a opacity: .5;
   like what we did with the video container (or .bg-video). Because by doing this, EVERYTHING which is in this .story element,
   would get that low opacity. But we only want the background of this .story to get this opacity not the things which are in
   this .story . So we must use rgba() on the background-color of .story element, instead of giving .story , opacity property. */
  //background-color: $color-white;
  background-color: rgba($color-white, .6);
  border-radius: .8rem;
  padding: 6rem;
  padding-left: 9rem;
  /* We gave a font-size to this element to set the font-size of this element AND also the children that are inside this element
   and don't have a font-size specified for them and those children that haven't font-size explicitely set for them and therefore
   inherit this font-size are: <figure class="story__shape"> and <div class="story__text"> and
   <h3 class="heading-tertiary u-margin-bottom-small"> and <p>
   */
  font-size: $default-font-size;

  /* For making a box NOT to be a rectangular visually! (but inside, it's still a box or rectangular, because each html element is
  a box), we can skew that box.
  After skewing the entire section, we see that the content that is inside the box is also skewed, like text or ... .
  For making the content back to it's normal state, we must skew the content in opposite direction of skew of entire box.
  In other words, for fix the inner stuff, we must skew ALL of the direct childes of box which is skewed in opposite direction. So
  we can use direct child selector on the box that is skewed.*/
  transform: skewX(-12deg);

  @include respond(tab-port) {
    /* After giving .story this width: 100%; , you still see that there's still some space in sides, but that's because of .row .
     Also you see up until 600px, it's ok but in viewport width less than 600px, it starts to look bad. So we can decrease the
     padding in between 600-900 too.

     Important: The smaller media query must be AFTER the media queries with larger max-width. */
    width: 100%;
    padding: 4rem;
    padding-left: 7rem;
  }

  @include respond(phone) {
    /* We also need to make the transform prop in &__shape to 0deg, because in there we're compensating the transform that we did
     here, but in smaller screens like phones we don't use transform in .story , so we must not do any transform in &__shape too.
     So I added a 0deg for transform functions in &__shape too, when we're in small screens.*/
    transform: skewX(0deg);
  }

  /* Important: This selector actually would select direct childes of .story which are .story__shape and .story__text
      Right now if you do write this, it's not going to work for .story__shape and that's because we are already using transform
      prop in .story__shape with value of translateX() and that transform which is inside the direct child, takes precedence over
      the direct child selector. Therefore only translateX() for transform of .story__shape would work not skewX(). But also
      we can't have two transform PROPERTIES(not values) applying at the same time for a selector. So we can add skewX(12deg) to
      the transform prop, which is at &__shape selector and not in & > * selector.
      So with this, we don't need direct selector anymore, because we gave it's property to &__shape and we can also gave it's prop
      to &__text as well. So we don't need it anymore.(Although it's property is applying to &__text but we can gave the prop, directly
      to &__text therefore we don't need this direct child selector anymore. But I kept it.)*/
  & > * {
    transform: skewX(12deg);
  }

  &__shape {

    /* First we must give equal width and height to the <figure class="story__shape"> to make it like a square.
     Then we want this element to sit on the left side. So float: left; in order to make the rest of the content float around it.
     This <figure class="story__shape"> doesn't even need to looks like a circle right now. All we have to do is to use
     shape-outside property.

     In the value of shape-outside property we have to define a vectorized shape and we did that already when we define clip-path
     properties. But in there, we defined a polygon(). But this time we must use circle().
     In parentheses of circle() in shape-outside property, we can define the size of circle and the position of center of the circle.
     The first arg in circle() is the radius of circle. So if we say 50%, then the radius would be half of the height and the width of the
     element. So in this case, the radius would be 15/2 = 7.5rem so the diameter of the circle would be 15rem and this is exactly the
     size of the shape (width and height) that we specified in the beginning.
     In parentheses of circle(), at 50% 50% means that it's in the center of the circle. So exactly center horizontally and vertically.

     Now in order to make this work, the element must actually be floated and we already done that! with float: left;
     and also there's another thing to make this to work and that is the element MUST have declared EXPLICITLY dimensions (width and height).
     So this property is quite a demanding property! Because it has to have height and width explicitly and float and only then
     it works.

     In safari and chrome, this property only works with -webkit- prefix and this means in firefox and edge and IE it doesn't work
     currently.

    Now you see the text that is around this circle is wrapping around a circle shape. But this shape is not circle yet and it's a
    square but text that is around this square is behaving like it's a circle besides it.
    So now let's ACTUALLY take out this circle from the square with clip-path property and in the value of clip-path we put the
    exact circle that we have in shape-outside property.

    Recap: The shape-outside property defines where the content floats around the element that have this property. So in this case,
    this property make the around content to behave like there is a circle besides them. But the actual circle must be drawed by
    clip-path.So if we want that element to ACTUALLY looks like a circle, we must use clip-path.

    We want to make some space between a floated element and elements that are around it:
    Learn: The best way to move around an element which is floated is to actually NOT mess with margins or anything like that and
     we should just use a transform prop on the floated element.

    We AGAIN skewed this class, in order to compensate the skew that we did in .story . */
    width: 15rem;
    height: 15rem;
    float: left;
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg);
    /* After declaring this transform, the circle goes into the padding area and takes HALF of the left padding area. So lef So let's add some more
     padding in .story by specifying padding-left property and for the value of padding-left, we add the value that we move the
     .story__shape to the padding we had for left side which is 6rem. With this, part of the image is still in padding area but
     the padding is VISUALLY 6rem everywhere(but in box model it's kind of not!)*/

    position: relative;

    @include respond(phone) {
      /* Because we're changing ONE of the functions that we used in transform in larger devices, we also need to bring the things
       that we don't want to change them, like translateX() in this case, in order to say: We don't want to change that, we just
       need to change the skewX() .*/
      transform: translateX(-3rem) skewX(0deg);
    }
  }

  &__img {
    height: 100%;

    /* The <img> is where you can see the blue box when hover on the <img> in developers tools.
    I want to take the image a little to the left */
    transform: translateX(-4rem) scale(1.4);

    /* Also here you can use backface-visibility: hidden; if the image was kind of cut. So whenever something wierd happens
     when dealing with animations and translating , if sth weird happens you can use that prop.
     So I used it because when using blur() on the hover of image, the image would be wierd when getting blurred.*/
    transition: all .5s;
    backface-visibility: hidden;
  }

  &__text {
    transform: skewX(12deg);

    @include respond(phone) {
      transform: skewX(0);
    }
  }

  &__caption {
    /* hover on the .story: First the image would zoom out and then text moving in and also the image getting blurred.
    We added that text which would be on the image, by using <figcaption> element which this element is inside <figure> element and
    we want that <figcaption> to be on top of the image and centered horizontally and vertically based on the image.

    So we must use position: absolute; and because we used position: absolute; we need to set the position of container of this
    element to be relative and it's container is <figure class="story__shape">
    Learn: Now for centering horizontally and vertically for the element with position: absolute; we say: top: 50%; left: 50%; and then
     transform: translate(-50%, -50%)

    So before we hover on the <div class="story"> , the text or <figcaption> needs to be invisible and it must be in some distance
    in Y axis and when we hover on that <div class="story"> , the text must moves up to the center of image. So the caption in it's
    normal state, must be more under it's centered position and then we hover on that box, that caption must moves up. So we can
    make it to go further down, by using transform: translate() , but we're are already using this prop. So let's manipulate it's
    values. So instead of -50%, -50% we can make the value in Y direction more. So instead of -50% , we can set it to 10% or more.
    Also for making it invisible at normal state, I used opacity: 0;*/
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: $color-white;
    text-transform: uppercase;
    font-size: 1.7rem;

    /* Let's center the content which is inside this .story__caption element */
    text-align: center;
    opacity: 0;
    transition: all .5s;
    backface-visibility: hidden;
  }

  /* As soon as the .story is hovered, we want the .story__caption to have some styles: */
  &:hover &__caption{
    opacity: 1;

    /* Here we want to make element to be in translate(-50%, -50%) and currently it has translate(-50%, 20%) . But should we
    write translate(-50%, -70%) ? Because if you want to get to -50% from 20% , you must minus 20% from -70% in order to get to
    -50%? NOOOO! You must specify the FINAL value you want to the element be. We want the element to be in -50%, -50% and it doesn't
    matter currently it is in x%, y% . We must set the final value here which is -50%, -50% . Also you must specify ALL of the values
    of both axises and YOU SHOULDN'T ONLY SPECIFY THE VALUE OF AXIS YOU WANT TO CHANGE. So in here, we just want to translate the
    element in Y axis, but you can't only specify the transform: translateY(-50%);, instead as I say you must SPECIFY THE FULL
    version of translate() and it's values.So transform: translate(-50%, -50%);

    Currently in the end of translate animation of &__caption , you can see a little shake of text. So let's add the
    backface-visibility: hidden; for the normal state of the element which in the end of it's hover state shakes a little bit.
    So I added backface-visibility: hidden; to &__caption in order to fix the little glitch.
    */
    transform: translate(-50%, -50%);
  }

  &:hover &__img {
    /* The image must zoom out when we hover on the box of .story element. So initially you must zoom-in(more scale) the image a little bit and
    after hovering on .story we zoom out(scale down) that image.
    So let's add scale() to &__img .

    IMPORTANT: When you have transform prop on the initial(normal) state of an element and you want to change that transform prop in
     other states of that element, you must write ALL of the functions that you used in value of transform prop.
     So here, in the normal state of &__img we have the transform prop and in :hover state of this element, we want to change JUST
     ONE function that is used in this prop in hover state of this element. Although you want to change just one of the functions
     of the transform prop in hover state, YOU MUST WRITE ALL OF THE FUNCTIONS THAT YOU USED IN INITIAL STATE OF THIS ELEMENT IN OTHER
     STATE OF THIS ELEMENT WHICH IN THIS CASE IS hover state. So here I must write translateX(-4rem) scale(1); instead of
     just scale(1); . Although just scale(); function was changed. So we learnt that if you had transform prop in normal state
     of a class, you must duplicate all of it's functions in other states too! Even if you want to just change one of the functions.

    Learn: When you say scale(1.4); it means 140% larger of that element.*/
    transform: translateX(-4rem) scale(1);

    /* In brightness() we can specify a value lower than 100%, to make the image darker and a value above 100% , makes the image
    brighter.

    Learn: If you want to see the hover state of an element(if it has a hover state actually!) you can go to that element on
     dev tools and then in the right pane, you can select :hov tab and then click on hover. Now the element would become the thing
     that it would be if we hover on it, without actually hovering on it. (It's mainly for debug purposes.) . After doing this,
     you can change the styles that would apply that element in hover mode of that element instantly and even without hovering
     on that element.*/
    filter: blur(3px) brightness(80%);
  }
}






