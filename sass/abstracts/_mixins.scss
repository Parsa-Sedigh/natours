/* a @mixin is a reusable code that we can @include it in the declaration of a css class or css id. When we @include a @mixin
the codes that are in that @mixin will be kind of extracted wherever we @include that @mixin.*/

/* When an element has childes that ALL of those childes have floated, then that container of those childes would have 0 height.
 For fixing this, we must use a clearfix class.
 Now what does clearfix do? A clearfix will append a pseudo element after the element that are using this clearfix on that element,
 which will clear the floats of all of the childes of that element that we're using a clearfix on it.
 Important: When we @include this @mixin inside a selector, the & will copy the selector. So if we @include this @mixin in .row ,
  the code of clearfix would be: .row::after {...}

 In clearfix, we MUST specify the content property, otherwise the pseudo element won't appear on tha page BUT WE DON'T WANT TO SEE
   this pseudo element on the page, so we specify nothing inside the quotes for value of content property.
   clear:both; will clear both float:left; and float:right; on the childes of an element which we're using clearfix on it.*/
@mixin clearfix {
  &::after{
    content: "";
    display:table;
    clear:both;
  }
}

@mixin centerHorizontalVertical {
  & {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// Media query manager:
/* First let's first specify our breakpoints.
0-600px:       phone
600-900px:    tablet in portrait mode
900-1200px:    tablet in landscape mode
[1200-1800px]: is where our normal styles apply(we don't write media queries for this range- because well, our out of @media queries are in this
range. Because we're using desktop first approach, where our normal styles that we have written so far, which are outside of media queries,
are for the desktop.)
1800px +:      big desktops

Now we must write max-width media queries for those 3 ranges(ranges before our normal range) and min-width media queries for 1800px + range,
because well, a min-width media query checks if currently we have a screen bigger than the specified minimum width and because in that specific
range we just know the minimum width and not the maximum width, I use min-width based @media query for that range.

Our first media query is for phone devices.
Now how do we pass css props into the @mixin, in order to change those props base on the device we are writing the mixin for?
Learn: We can use @content directive and it allows us to pass a BLOCK of code into a @mixin.
So let's use @content inside {} of our media query definition and then let's @include this media query in for example _base.scss and inside
html selector. Then let's PASS(Yes pass!) the css props and values that we want to change in {} of @media query and those things we are passing
to @mixin in this case, would be the @content. Because in respond-phone @mixin, we are saying everything that is inside {} of @media of this
@mixin, is part of @content directive. But remember, in the past we used to pass arguments to a @mixin and in order to do that, we use () for
both definition of @mixin(for GETTING or RECEIVING those args) and also when @including that @mixin (in order to SEND or PASS those args or in
that case, values of properties), but by using @content, passing arguments to @mixins is different than using parentheses for @mixins in order to
pass arguments.
Because when using @content, we can pass an entire block of code into where the @content is defined inside the @mixin.
Important: ALL of the codes that you put into the {} of included mixin, will injected where @content is sit in definition of that @mixin.
 So when we want to use a @mixin which has @content in it, first we @include that @mixin, then pass the block of code that we want to PASS it
 to where the @content which is inside of that @mixin, sits. After the block of codes were pasted where the @content is living, the @mixin will
 do it's natural job and will paste ALL OF the codes that it has in it's body, where we @included it.
EX)AN example for this process:
Imagine we have respond-phone @mixin which is:
@mixin respond-phone {
  @media (max-width:600px) {
    @content;
  }
}
And this @mixin is @included in a file and in a selector which lives in that file and that selector is:
html {
  font-size: 50%;
}

Now let's first @include that mixin where we want:
html {
  font-size: 50%;
  @include respond-phone;
  // Right now, the mixin is injecting the code that it has in it's body, but without injecting the @content in here. Why?
  // Well because we didn't pass a block of code to this included mixin yet!
}

Now because we have @content in definition of that @mixin, we can pass a BLOCK of code to that mixin by just writing the css props in the
@mixin. So:
@include respond-phone {
  <some stuff>
}
Now that <some stuff> will be pasted where @content lives in definition of that mixin and THEN the mixin will do it's job and inject all of
the code that it has in it's body, where it's included.

So the difference between using @content and () for passing data to mixin is, the () way is very simple, but the @content way, is that we just
write the styles that we want to pass to @mixin, in {} of @INCLUDED mixin and then the mixin will do it's job and inject whatever it has
in it's body and ALSO the things we passed to it, in where it has been included.

Now we can even make our approach better. Because right now, we have a mixin for making the selectors that we included that mixin for them,
phone friendly. But we also need to define other mixins for making selectors responsive for tablets and desktops and ... and then
include those mixins in where those selectors live. So it's not a good way.
Instead, we want only one huge mixin which covers all of the cases.
So let's create a new mixin, called respond and instead of having static breakpoints, we can pass a breakpoint into this new mixin, in order
to just have ONE mixin for managing media queries.

Now let's write the names of the breakpoints that I want to pass into that mixin as $breakpoint. So actually let's documenting that
$breakpoint. (Of course we can pass anything we want, but I REALLY SPECIFIED and RESTRICTED the things that we can send to this mixin as
$breakpoint arg. So we can't send any other value to this mixin because we are checking the things we passed, by using @if and the things
that this mixin will inject in the place that it was included, depends on the name that we passed to this @mixin.)
Now when you want to use this new mixin, you must pass it either phone or tab-port or ... .

Also it's not good to use px units in media queries and that's because if the user changes the default font-size(which is 16px)
in the browser, then the media queries TODO

So we can react ACCORDINGLY to the root font-size of the browser, even if the user changes it, by using rem units in media queries too
and therefore REFLECT that new root font-size in our media queries and then the rem unit will converted into px unit in the browser and
therefore we would have a new media query based on the new font-size that user set in and this is better than using static px units for
media queries.

Important: So if the user changes the default font-size of browser, then the media queries would not be affected by that new font-size.
 However, we want them to be affected by the new font-size that the user sets in. So just like before in our styles, we use a relative unit
 to px which would convert to px at the end.
Now about rems and ems, there's an crucial particularity about them in media queries. That's because those 2 relative units in media
queries, are not affected by our root font-size setting(the font-size: 62.5% prop in html in _base.scss). So they simply are not
affected by what we do there(in opposite of other styles).
Important: So what that means, is that 1rem or 1em in a media query, is always equal to the font-size that is coming from browser and
 by default that is 16px, but if the user changes it to like 20px, then 1rem or 1em in media query would be 20px no matter what we have
 in our base font settings. Now in here, we're gonna use ems and not rems. Because rems fail to work as intended in some of the browsers.
 So ems are best option for media queries.
 So keep in mind that by default in a media query, 1em is equal to 16px. So for example, when we have 600px, the equal em for it is:
 600 /16 = 37.5em
 900 / 16 = 56.25em
 1200 / 16 = 75em
 1800 / 16 = 112.25em

Now, the checking statement of these media queries will be converted to px and will be adopted to the font-size that the user set for
his browser, even if he changes it. So it's more accessible solution instead of using px in checking statement of media queries(it doesn't need
to do that in body or the styles of media queries because that weird behavior of browsers won't apply there, it just applies to checking
statement of media queries.)*/

/*
@mixin respond-phone {
  @media (max-width:600px) {
    @content;
  }
} */

/* $breakpoint argument choices:
- phone
- tab-port (aka tablet-portrait)
- tab-land
- big-desktop */
@mixin respond($breakpoint) {
  @if($breakpoint == phone) {
    /* This media query checks if the current width of device is less or equal than 600px, then it will apply it's body. */
    @media (max-width: 37.5em) {
      @content;
    }
  }

  @if($breakpoint == tab-port) {
    @media (max-width: 56.25em) {
      @content;
    }
  }

  @if($breakpoint == tab-land) {
    @media (max-width: 75em) {
      @content;
    }
  }

  @if($breakpoint == big-desktop) {
    /* When we want this media query to happen?
    We want this to happen, when the width of device is larger than 1800px. So because we want it to be LARGER than the breakpoint,
    for checking if it is larger or not, we use min-width in @media.*/
    @media (min-width: 112.25em) {
      @content;
    }
  }
}




