@import "../abstracts/_variables.scss";

/* Because .section-about is very specific to home page, we put the css declarations of this element in _home.scss file. So this means
 if the website grows and have more pages, nowhere else we would have again this .section-about element, at least not similar to this one.
 If we would have that on other pages, we shouldn't place this in this file.

 When you want to put a color in css declaration, it's better to first put it in _variables.scss file and then write the variable name
 for that color, where you want to declare that css.*/
/* Important: Why we didn't nest blocks like:
     .section- {
        &about {...}
        &features {...}
     }
     ???
     Because the blocks are independent stuff so we shouldn't nest them inside each other or another thing.*/
.section-about {
  background-color: $color-grey-light-1;
  padding: 25rem 0;

  /* height of .header is 95vh and in that .header declaration, we have a polygon() which in it's right side goes until 75vh.
  So the difference is 20vh (95vh - 75vh). So we can move up this .section-about by giving it a negative margin-top . */
  margin-top:-20vh;
}

.section-features {
  /*padding: <left and right padding> <top and bottom> */
  padding: 20rem 0;
  background-image: linear-gradient(
                  to right bottom,
                  rgba($color-primary-light, 0.8),
                  rgba($color-primary-dark, 0.8)),
                  url(../../img/nat-4.jpg);
  background-size: cover;

 /* It's not very good looking to use background-attachment: fixed; on this section. Because we skewed the entore section */

  /* We want this section to be like skewed. We can use clip-path property. But we can also simply skew the entire section.
  So use transform: skewY(). Now all of the things that are in this section also would skewed. So we need to fix that. Also
  we need to fix the wide gap between this section and previous section. For fixing this, we can simply move up the entire
  .section-feature , so it would covers the white gap.
  Now for fixing the skewed stuff inside this section, we can simply just skewed them in opposite direction and equal value of
  skewed section. So if we use skewY(-xdeg) for entire section, we need to use skewY(xdeg) for things that are inside that section.
  So let's skew the boxes that are inside this section.
  Now we could go ahead and go into the .feature-box and use skewY() in normal state and also hover state(I did this but commented it out.),
  but we want to fix this issue differently. Because imagine that one day, we want to put something else here in .section-features ,
  for example imagine we add a couple of other boxes with different names or ... and therefore what would we do? We would have to
  add transform: skewY(7deg); again in those boxes and their :hover state as well, so we don't want to do that(currently we duplicated
  transform: skewY(7deg); in both normal state and hover state of .feature-box as well and this is not good- so imagine we add
  more boxes with different classes and more duplicates and this is not good.)

  Instead we can use direct child selector here. Here we selects ALL(*) of the direct childes(>) of .section-features .

  What's the difference between .section-features > * and .section-features ? In first selector, we select all of the DIRECT childes of
  .section-features , but in second selector we selected all of the childes (like childes of a child of .section-features).
  So the first selector selects just <div class="row"> but second selector selects all of the elements that are inside .section-features .

  Learn: first selector > second selector : The direct child selector will only select direct descendents of the first selector if they
   also matches second selector.a > b selects b's what are only children to the a, it will NOT select b what is child of b what is child of a.

   Currently the background-image of this entire section is also skewed but we can't notice it very much. So it's not a big deal.*/
  transform: skewY(-7deg);
  margin-top: -10rem;

  & > * {
    /* Inside this selector, we apply styles to direct child of .section-features (in this case that direct child is just
    <div class="row"> and not the elements that are inside this <div>)

    Recap: We skewed in opposite direction to compensate for the skewing of entire direction.*/
    transform: skewY(7deg);
  }
}

.section-tours {
  background-color: $color-grey-light-1;
  padding: 25rem 0;
  margin-top: -10rem;
}

.section-stories {
  /* padding: <value1> <value2>
   value1 is top and bottom and value2 is left and right.*/
  padding: 15rem 0;
  position: relative;
}

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark);
}

.book {
  /* linear-gradient(FIRST_COLOR, SECOND_COLOR, ...)  Why we used rgba() in this case? Because we want to specify the opacity
  of the colors we're using here too.

  Learn: Instead of specifying the to right bottom or to left or ... (direction of gradient), we can specify an angle. So if we say 90deg
   the gradient would go from left to right.
   So 0deg is from top to bottom and when the degrees get more, the direction of gradient is going anti clockwise. So 36deg is going to
   be more at anti clockwise than 35deg.

  In this case that 105deg, is like we're using clip-path .

  In linear-gradient() function, we can use percentages to specify different parts of gradient. So with percentages in this function,
  we can specify in those coordinates which are specified with percentages, which colors there must be.So we can say in the beginning
  of the gradient in other words in 0%, we want the black color to be exists. So we can say:
  linear-gradient($color-black 0%, ...) or linear-gradient(rgba($color-black) 0%, ...)

  Currently by using:
   background-image: linear-gradient(
                  105deg,
                  rgba($color-white, .9) 0%,
                  orangered 50%),
                  url(../../img/nat-10.jpg);

  We have a GRADIENT which at 50% we have the orangered color but completely orangred and not an orangred with some white in it. NO!
  Completely orangred.
  IMPORTANT: So when you say: red 40% it means in 40% of that total gradient, we would have COMPLELETELY AND PURE of that red color.
  So in the prior snippet code, we have the actual gradient between 0% and 50%. So in 0% we have completely white color and in
  50% we have completely orange color. But we don't want to have a gradient between 0% and 50% . In other words we want our white
  color to be completely white until 50% and then from 50% till the end, we want completely orangered. So we can say:
  background-image: linear-gradient(
                  105deg,
                  rgba($color-white, .9) 0%,
                  rgba($color-white, .9) 50%,
                  orangered 50%),
                  url(../../img/nat-10.jpg);

  So we're saying at 0% we want completely white or rgba($color-white, .9) and in 50% we also want EXACTLY rgba($color-white, .9) .
  EXACTLY means we don't want gradient there and then at 50% we want COMPLETELY orangred. Why COMPLETELY?
  Because when we specify a color in the x percentage, that color would be completely pure in that place, but BEFORE that x percentage
  like x-10 or x-2 or even x-1 place, that color wouldn't be pure.
  Learn: Like what we did in: rgba($color-white, .9) 50%,
                              orangered 50%),
   we are saying in 50% we want pure rgba($color-white, .9) and in 50% we want pure orangered 50% , therefore, the result is
   we have a sudden change between these 2 colors at 50% . Because we are changing the color in 50% which is a very short distance in
   compare to 0% and 50% . So we have a big contrast and that's what we need here in this form.

  Again if we have sth like:
  background-image: linear-gradient(
                  105deg,
                  rgba($color-white, .9) 0%,
                  rgba($color-white, .9) 40%,
                  orangered 50%),
                  url(../../img/nat-10.jpg);

  We would have gradient between 40% and 50%. So if we put these values at the same number, like what we did in above at 50%,
  we would have a solid line which is separating a huge contrast between colors of gradient in 50% for example.
  So we have a gradient between two solid colors. So that's why we name it like that.

  transparente is absence of colors.

  So with this technique we didn't use any clip-path. But this technique is not always possible. So we can't use it in for example
  in section-features or header in our website.
  */
  background-image: linear-gradient(
                  105deg,
                  rgba($color-white, .9) 0%,
                  rgba($color-white, .9) 50%,
                  transparent 50%),
  url(../../img/nat-10.jpg);

  /* Instead of using a keyword like cover here, we can use a value like 100% here and 100% HERE means the exact same thing as
   cover keyword HERE. That's because cover, will stretch the image to occupy the entire container of that image with
   background-size: cover; and that's what also by using 100%(100% of width) there, we get.
   If you are using 100% for background-size and if you decrease it to for example 90% , you would see that the image would start
   to repeating on one side(from the right side) and if we put 50% , the entire width for that background-image would be divided
   into 2 columns and since the aspect ratio of the image stays the same, we have multiple images of that background image.
   Also you can specify a higher value than 100% .

   When a <div> hasn't got any content in it, it would have a height of 0 . So actually for seeing that <div> in the beginning,
   we can give it some height explicitely. So this is just for testing purposes. Because later on, we want the content of that
   <div> to define the height of that container <div> .*/
  background-size: cover;
  height: 50rem;
  border-radius: $book-border-radius;
  box-shadow: 0 1.5rem 4rem rgba($color-black, .5);

  &__form {
    width: 50%;
    padding: 6rem;
    height: 50px;
  }
}




